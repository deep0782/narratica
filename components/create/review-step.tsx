'use client'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { BookOpen, Palette, Users, Film, Sparkles } from 'lucide-react'
import { useWizard, useCanProceed } from '@/contexts/wizard-context'

interface ReviewStepProps {
  onGenerate: () => void
  onPrev: () => void
}

export function ReviewStep({ onGenerate, onPrev }: ReviewStepProps) {
  const { state: { formData } } = useWizard()
  const canProceed = useCanProceed()
  return (
    <div className="max-w-4xl mx-auto space-y-6">
      <div className="text-center space-y-2">
        <h2 className="text-3xl font-bold text-gray-900">Review Your Story</h2>
        <p className="text-gray-600">
          Take a final look at your story details before we create your magical book
        </p>
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        {/* Story Details */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <BookOpen className="h-5 w-5 text-purple-600" />
              Story Details
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <h4 className="font-semibold text-gray-900">Title</h4>
              <p className="text-gray-700">
                {formData.autoGeneratedTitle || 'Untitled Story'}
              </p>
            </div>
            
            <div>
              <h4 className="font-semibold text-gray-900">Description</h4>
              <p className="text-gray-700 text-sm">
                {formData.storyDescription || formData.story_description || 'No description provided'}
              </p>
            </div>

            {formData.selectedChild && (
              <div>
                <h4 className="font-semibold text-gray-900">Main Character</h4>
                <p className="text-gray-700">{formData.selectedChild}</p>
              </div>
            )}

            {(formData.specific_elements?.length > 0 || formData.child_interests?.length > 0) && (
              <div>
                <h4 className="font-semibold text-gray-900">Special Elements</h4>
                <div className="flex flex-wrap gap-1 mt-1">
                  {formData.specific_elements?.map((element, index) => (
                    <Badge key={index} variant="secondary" className="text-xs">
                      {element}
                    </Badge>
                  ))}
                  {formData.child_interests?.map((interest, index) => (
                    <Badge key={`interest-${index}`} variant="secondary" className="text-xs">
                      {interest}
                    </Badge>
                  ))}
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Art Style */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Palette className="h-5 w-5 text-pink-600" />
              Art Style
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <h4 className="font-semibold text-gray-900">Style</h4>
              <p className="text-gray-700">{formData.artStyle || 'Watercolor'}</p>
            </div>
            
            <div>
              <h4 className="font-semibold text-gray-900">Color Palette</h4>
              <p className="text-gray-700">{formData.colorPalette || 'Warm and Bright'}</p>
            </div>

            <div>
              <h4 className="font-semibold text-gray-900">Illustration Style</h4>
              <p className="text-gray-700">{formData.illustrationStyle || 'Detailed'}</p>
            </div>
          </CardContent>
        </Card>

        {/* Characters */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Users className="h-5 w-5 text-blue-600" />
              Characters ({(formData.characters?.length || 0) + (formData.extractedCharacters?.length || 0)})
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {formData.characters?.map((character) => (
                <div key={character.id} className="border-l-4 border-blue-400 pl-3">
                  <div className="flex items-center gap-2">
                    <h4 className="font-semibold text-gray-900">{character.name}</h4>
                    <Badge variant={character.role === 'main' ? 'default' : 'secondary'}>
                      {character.role}
                    </Badge>
                  </div>
                  <p className="text-sm text-gray-600">{character.description}</p>
                </div>
              ))}
              
              {formData.extractedCharacters?.map((character) => (
                <div key={character.id} className="border-l-4 border-green-400 pl-3">
                  <div className="flex items-center gap-2">
                    <h4 className="font-semibold text-gray-900">{character.name}</h4>
                    <Badge variant="outline">extracted</Badge>
                  </div>
                  <p className="text-sm text-gray-600">{character.description}</p>
                </div>
              ))}

              {(formData.characters?.length || 0) + (formData.extractedCharacters?.length || 0) === 0 && (
                <p className="text-gray-500 text-sm">No characters defined yet</p>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Scenes */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Film className="h-5 w-5 text-green-600" />
              Scenes ({(formData.scenes?.length || 0) + (formData.generatedScenes?.length || 0)})
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {formData.scenes?.map((scene, index) => (
                <div key={scene.id} className="border-l-4 border-green-400 pl-3">
                  <div className="flex items-center gap-2">
                    <h4 className="font-semibold text-gray-900">Scene {index + 1}</h4>
                    <Badge variant="outline">{scene.mood}</Badge>
                  </div>
                  <p className="text-sm font-medium text-gray-800">{scene.title}</p>
                  <p className="text-sm text-gray-600">{scene.description}</p>
                </div>
              ))}

              {formData.generatedScenes?.map((scene, index) => (
                <div key={scene.id} className="border-l-4 border-purple-400 pl-3">
                  <div className="flex items-center gap-2">
                    <h4 className="font-semibold text-gray-900">Scene {index + 1}</h4>
                    <Badge variant="secondary">generated</Badge>
                  </div>
                  <p className="text-sm font-medium text-gray-800">{scene.title}</p>
                  <p className="text-sm text-gray-600">{scene.description}</p>
                </div>
              ))}

              {(formData.scenes?.length || 0) + (formData.generatedScenes?.length || 0) === 0 && (
                <p className="text-gray-500 text-sm">No scenes defined yet</p>
              )}
            </div>
          </CardContent>
        </Card>
      </div>

      <Separator />

      {/* Additional Story Information */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Sparkles className="h-5 w-5 text-yellow-600" />
            Story Settings
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4 md:grid-cols-3">
            {formData.age_range && (
              <div>
                <h4 className="font-semibold text-gray-900">Age Range</h4>
                <p className="text-gray-700">{formData.age_range}</p>
              </div>
            )}
            
            {formData.story_length && (
              <div>
                <h4 className="font-semibold text-gray-900">Story Length</h4>
                <p className="text-gray-700">{formData.story_length}</p>
              </div>
            )}

            {formData.educational_theme && (
              <div>
                <h4 className="font-semibold text-gray-900">Educational Theme</h4>
                <p className="text-gray-700">{formData.educational_theme}</p>
              </div>
            )}

            {formData.moral_lesson && (
              <div>
                <h4 className="font-semibold text-gray-900">Moral Lesson</h4>
                <p className="text-gray-700">{formData.moral_lesson}</p>
              </div>
            )}

            {formData.setting_preference && (
              <div>
                <h4 className="font-semibold text-gray-900">Setting</h4>
                <p className="text-gray-700">{formData.setting_preference}</p>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Action Buttons */}
      <div className="flex justify-between pt-6">
        <Button variant="outline" onClick={onPrev}>
          Back to Scenes
        </Button>
        
        <Button 
          onClick={onGenerate}
          className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
        >
          <Sparkles className="h-4 w-4 mr-2" />
          Generate My Story
        </Button>
      </div>
    </div>
  )
}
