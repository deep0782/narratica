"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import {
  BookOpen,
  Palette,
  Users,
  Film,
  Sparkles,
  Edit,
  Wand2,
  Clock,
  Target,
  Heart,
  MapPin,
  AlertCircle,
  CheckCircle2,
} from "lucide-react"
import { useWizard } from "@/contexts/wizard-context"
import Image from "next/image"

interface ReviewStepProps {
  onGenerate: () => void
  onPrev: () => void
}

export function ReviewStep({ onGenerate, onPrev }: ReviewStepProps) {
  const {
    state: { formData },
  } = useWizard()
  const [isGenerating, setIsGenerating] = useState(false)

  const handleGenerate = async () => {
    setIsGenerating(true)
    try {
      await onGenerate()
    } finally {
      setIsGenerating(false)
    }
  }

  // Combine all characters
  const allCharacters = [...(formData.characters || []), ...(formData.extractedCharacters || [])]

  // Combine all scenes and sort by order
  const allScenes = [...(formData.scenes || []), ...(formData.generatedScenes || [])].sort((a, b) => a.order - b.order)

  // Get art style display names
  const getArtStyleName = (styleId: string) => {
    const styles = {
      watercolor: "Watercolor Dreams",
      cartoon: "Cartoon Adventure",
      "digital-art": "Digital Magic",
      storybook: "Classic Storybook",
      minimalist: "Simple & Clean",
      fantasy: "Fantasy Realm",
    }
    return styles[styleId as keyof typeof styles] || styleId
  }

  const getColorPaletteName = (paletteId: string) => {
    const palettes = {
      warm: "Warm & Cozy",
      cool: "Cool & Calm",
      pastel: "Pastel Dreams",
      vibrant: "Bright & Bold",
      earth: "Natural Earth",
      magical: "Magical Rainbow",
    }
    return palettes[paletteId as keyof typeof palettes] || paletteId
  }

  // Calculate completion status
  const hasTitle = !!formData.autoGeneratedTitle
  const hasDescription = !!(formData.storyDescription || formData.story_description)
  const hasCharacters = allCharacters.length > 0
  const hasScenes = allScenes.length > 0
  const hasArtStyle = !!formData.artStyle
  const isComplete = hasTitle && hasDescription && hasCharacters && hasScenes && hasArtStyle

  return (
    <div className="max-w-6xl mx-auto space-y-8">
      {/* Header Section */}
      <div className="text-center space-y-4">
        <div className="flex items-center justify-center gap-3">
          <div className={`p-2 rounded-full ${isComplete ? "bg-green-100" : "bg-amber-100"}`}>
            {isComplete ? (
              <CheckCircle2 className="h-6 w-6 text-green-600" />
            ) : (
              <AlertCircle className="h-6 w-6 text-amber-600" />
            )}
          </div>
          <h2 className="text-3xl font-bold text-gray-900">Review Your Story</h2>
        </div>
        <p className="text-gray-600 max-w-2xl mx-auto">
          Take a final look at your story details before we create your magical book. All sections marked with a green
          checkmark are complete and ready for generation.
        </p>
      </div>

      {/* Completion Status Alert */}
      {!isComplete && (
        <Alert className="border-amber-200 bg-amber-50">
          <AlertCircle className="h-4 w-4 text-amber-600" />
          <AlertDescription className="text-amber-800">
            Some sections may need attention before generating your story. Review the sections below to ensure
            everything is complete.
          </AlertDescription>
        </Alert>
      )}

      {/* Main Content Grid */}
      <div className="grid gap-8 lg:grid-cols-3">
        {/* Left Column - Story Details & Settings */}
        <div className="lg:col-span-1 space-y-6">
          {/* Story Details */}
          <Card
            className={`transition-all duration-200 ${hasTitle && hasDescription ? "ring-2 ring-green-200 bg-green-50/30" : "border-gray-200"}`}
          >
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center gap-2">
                <BookOpen className="h-5 w-5 text-purple-600" />
                Story Details
                {hasTitle && hasDescription && <CheckCircle2 className="h-4 w-4 text-green-600 ml-auto" />}
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <h4 className="font-semibold text-gray-900 flex items-center gap-2">
                  Title
                  {hasTitle && <CheckCircle2 className="h-3 w-3 text-green-600" />}
                </h4>
                <div
                  className={`p-3 rounded-lg ${hasTitle ? "bg-white border border-green-200" : "bg-gray-50 border border-gray-200"}`}
                >
                  <p className={`${hasTitle ? "text-gray-900 font-medium" : "text-gray-500 italic"}`}>
                    {formData.autoGeneratedTitle || "Title will be generated automatically"}
                  </p>
                </div>
              </div>

              <div className="space-y-2">
                <h4 className="font-semibold text-gray-900 flex items-center gap-2">
                  Description
                  {hasDescription && <CheckCircle2 className="h-3 w-3 text-green-600" />}
                </h4>
                <div
                  className={`p-3 rounded-lg ${hasDescription ? "bg-white border border-green-200" : "bg-gray-50 border border-gray-200"}`}
                >
                  <p className={`text-sm ${hasDescription ? "text-gray-700" : "text-gray-500 italic"}`}>
                    {formData.storyDescription || formData.story_description || "No description provided"}
                  </p>
                </div>
              </div>

              {formData.selectedChild && (
                <div className="space-y-2">
                  <h4 className="font-semibold text-gray-900">Main Character</h4>
                  <div className="p-3 bg-purple-50 border border-purple-200 rounded-lg">
                    <p className="text-purple-800 font-medium">{formData.selectedChild}</p>
                  </div>
                </div>
              )}

              {(formData.specific_elements?.length > 0 || formData.child_interests?.length > 0) && (
                <div className="space-y-2">
                  <h4 className="font-semibold text-gray-900">Special Elements</h4>
                  <div className="flex flex-wrap gap-1">
                    {formData.specific_elements?.map((element, index) => (
                      <Badge key={index} variant="secondary" className="text-xs bg-blue-100 text-blue-800">
                        {element}
                      </Badge>
                    ))}
                    {formData.child_interests?.map((interest, index) => (
                      <Badge
                        key={`interest-${index}`}
                        variant="secondary"
                        className="text-xs bg-pink-100 text-pink-800"
                      >
                        {interest}
                      </Badge>
                    ))}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Story Settings */}
          <Card>
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center gap-2">
                <Sparkles className="h-5 w-5 text-yellow-600" />
                Story Settings
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {formData.age_range && (
                <div className="flex items-center gap-3">
                  <Clock className="h-4 w-4 text-gray-500" />
                  <div>
                    <h4 className="font-medium text-gray-900">Age Range</h4>
                    <p className="text-sm text-gray-600">{formData.age_range}</p>
                  </div>
                </div>
              )}

              {formData.story_length && (
                <div className="flex items-center gap-3">
                  <BookOpen className="h-4 w-4 text-gray-500" />
                  <div>
                    <h4 className="font-medium text-gray-900">Story Length</h4>
                    <p className="text-sm text-gray-600">{formData.story_length}</p>
                  </div>
                </div>
              )}

              {formData.educational_theme && (
                <div className="flex items-center gap-3">
                  <Target className="h-4 w-4 text-gray-500" />
                  <div>
                    <h4 className="font-medium text-gray-900">Educational Theme</h4>
                    <p className="text-sm text-gray-600">{formData.educational_theme}</p>
                  </div>
                </div>
              )}

              {formData.moral_lesson && (
                <div className="flex items-center gap-3">
                  <Heart className="h-4 w-4 text-gray-500" />
                  <div>
                    <h4 className="font-medium text-gray-900">Moral Lesson</h4>
                    <p className="text-sm text-gray-600">{formData.moral_lesson}</p>
                  </div>
                </div>
              )}

              {formData.setting_preference && (
                <div className="flex items-center gap-3">
                  <MapPin className="h-4 w-4 text-gray-500" />
                  <div>
                    <h4 className="font-medium text-gray-900">Setting</h4>
                    <p className="text-sm text-gray-600">{formData.setting_preference}</p>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Art Style */}
          <Card
            className={`transition-all duration-200 ${hasArtStyle ? "ring-2 ring-green-200 bg-green-50/30" : "border-gray-200"}`}
          >
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center gap-2">
                <Palette className="h-5 w-5 text-pink-600" />
                Art Style
                {hasArtStyle && <CheckCircle2 className="h-4 w-4 text-green-600 ml-auto" />}
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <h4 className="font-medium text-gray-900">Style</h4>
                <div
                  className={`p-3 rounded-lg ${hasArtStyle ? "bg-white border border-green-200" : "bg-gray-50 border border-gray-200"}`}
                >
                  <p className={`${hasArtStyle ? "text-gray-900 font-medium" : "text-gray-500 italic"}`}>
                    {getArtStyleName(formData.artStyle) || "No art style selected"}
                  </p>
                </div>
              </div>

              <div className="space-y-2">
                <h4 className="font-medium text-gray-900">Color Palette</h4>
                <div className="p-3 bg-white border border-gray-200 rounded-lg">
                  <p className="text-gray-700">{getColorPaletteName(formData.colorPalette) || "Default palette"}</p>
                </div>
              </div>

              {formData.illustrationStyle && (
                <div className="space-y-2">
                  <h4 className="font-medium text-gray-900">Illustration Style</h4>
                  <div className="p-3 bg-white border border-gray-200 rounded-lg">
                    <p className="text-gray-700">{formData.illustrationStyle}</p>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Right Column - Characters & Scenes */}
        <div className="lg:col-span-2 space-y-6">
          {/* Characters */}
          <Card
            className={`transition-all duration-200 ${hasCharacters ? "ring-2 ring-green-200 bg-green-50/30" : "border-gray-200"}`}
          >
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center gap-2">
                <Users className="h-5 w-5 text-blue-600" />
                Characters ({allCharacters.length})
                {hasCharacters && <CheckCircle2 className="h-4 w-4 text-green-600 ml-auto" />}
              </CardTitle>
              <CardDescription>
                {allCharacters.length === 0
                  ? "No characters have been added yet"
                  : `${allCharacters.length} character${allCharacters.length === 1 ? "" : "s"} ready for your story`}
              </CardDescription>
            </CardHeader>
            <CardContent>
              {allCharacters.length > 0 ? (
                <div className="grid gap-4 md:grid-cols-2">
                  {allCharacters.map((character) => (
                    <div
                      key={character.id}
                      className="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow"
                    >
                      <div className="flex items-start gap-3">
                        {character.imageUrl && (
                          <div className="w-16 h-16 rounded-lg overflow-hidden bg-gray-100 flex-shrink-0">
                            <Image
                              src={character.imageUrl || "/placeholder.svg"}
                              alt={character.name}
                              width={64}
                              height={64}
                              className="w-full h-full object-cover"
                            />
                          </div>
                        )}
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-2 mb-1">
                            <h4 className="font-semibold text-gray-900 truncate">{character.name}</h4>
                            <Badge
                              variant={character.role === "main" ? "default" : "secondary"}
                              className={character.role === "main" ? "bg-purple-100 text-purple-800" : ""}
                            >
                              {character.role}
                            </Badge>
                          </div>
                          <p className="text-sm text-gray-600 line-clamp-2">{character.description}</p>
                          {character.appearance && (
                            <p className="text-xs text-gray-500 mt-1 line-clamp-1">
                              <span className="font-medium">Appearance:</span> {character.appearance}
                            </p>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8 text-gray-500">
                  <Users className="h-12 w-12 mx-auto mb-3 text-gray-300" />
                  <p>No characters added yet</p>
                  <p className="text-sm">Characters will be extracted from your story or you can add them manually</p>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Scenes */}
          <Card
            className={`transition-all duration-200 ${hasScenes ? "ring-2 ring-green-200 bg-green-50/30" : "border-gray-200"}`}
          >
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center gap-2">
                <Film className="h-5 w-5 text-green-600" />
                Scenes ({allScenes.length}){hasScenes && <CheckCircle2 className="h-4 w-4 text-green-600 ml-auto" />}
              </CardTitle>
              <CardDescription>
                {allScenes.length === 0
                  ? "No scenes have been created yet"
                  : `${allScenes.length} scene${allScenes.length === 1 ? "" : "s"} planned for your story`}
              </CardDescription>
            </CardHeader>
            <CardContent>
              {allScenes.length > 0 ? (
                <div className="space-y-4">
                  {allScenes.map((scene, index) => (
                    <div
                      key={scene.id}
                      className="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow"
                    >
                      <div className="flex items-start gap-4">
                        {scene.imageUrl && (
                          <div className="w-20 h-16 rounded-lg overflow-hidden bg-gray-100 flex-shrink-0">
                            <Image
                              src={scene.imageUrl || "/placeholder.svg"}
                              alt={scene.title}
                              width={80}
                              height={64}
                              className="w-full h-full object-cover"
                            />
                          </div>
                        )}
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-2 mb-2">
                            <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">
                              Scene {scene.order}
                            </Badge>
                            <Badge variant="secondary" className="bg-blue-50 text-blue-700">
                              {scene.mood}
                            </Badge>
                          </div>
                          <h4 className="font-semibold text-gray-900 mb-1">{scene.title}</h4>
                          <p className="text-sm text-gray-600 line-clamp-2 mb-2">{scene.description}</p>
                          {scene.setting && (
                            <p className="text-xs text-gray-500">
                              <span className="font-medium">Setting:</span> {scene.setting}
                            </p>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8 text-gray-500">
                  <Film className="h-12 w-12 mx-auto mb-3 text-gray-300" />
                  <p>No scenes created yet</p>
                  <p className="text-sm">Scenes will be generated from your story or you can create them manually</p>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Generation Summary */}
      <Card className="bg-gradient-to-r from-purple-50 to-pink-50 border-purple-200">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Wand2 className="h-5 w-5 text-purple-600" />
            What We'll Create for You
          </CardTitle>
          <CardDescription>Here's what our AI will generate based on your story details</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="text-center p-6 bg-white rounded-xl shadow-sm">
              <div className="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-3">
                <BookOpen className="h-6 w-6 text-purple-600" />
              </div>
              <h4 className="font-semibold text-gray-900 mb-2">Complete Story</h4>
              <p className="text-sm text-gray-600">
                Full narrative with engaging text, dialogue, and rich descriptions
              </p>
            </div>
            <div className="text-center p-6 bg-white rounded-xl shadow-sm">
              <div className="w-12 h-12 bg-pink-100 rounded-full flex items-center justify-center mx-auto mb-3">
                <Palette className="h-6 w-6 text-pink-600" />
              </div>
              <h4 className="font-semibold text-gray-900 mb-2">Custom Illustrations</h4>
              <p className="text-sm text-gray-600">AI-generated artwork for each scene in your chosen art style</p>
            </div>
            <div className="text-center p-6 bg-white rounded-xl shadow-sm">
              <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3">
                <Sparkles className="h-6 w-6 text-blue-600" />
              </div>
              <h4 className="font-semibold text-gray-900 mb-2">Interactive Experience</h4>
              <p className="text-sm text-gray-600">Digital storybook with animations and interactive elements</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Generation Warning */}
      <Alert className="border-amber-200 bg-amber-50">
        <Clock className="h-4 w-4 text-amber-600" />
        <AlertDescription className="text-amber-800">
          <strong>Ready to generate?</strong> Story generation typically takes 3-4 minutes and will create custom
          illustrations for each scene. Please ensure all details are correct before proceeding as this process cannot
          be undone.
        </AlertDescription>
      </Alert>

      {/* Navigation */}
      <div className="flex justify-between items-center pt-6">
        <Button
          variant="outline"
          onClick={onPrev}
          disabled={isGenerating}
          className="flex items-center gap-2 bg-transparent"
        >
          <Edit className="h-4 w-4" />
          Back to Edit
        </Button>

        <Button
          onClick={handleGenerate}
          disabled={isGenerating || !isComplete}
          size="lg"
          className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 disabled:opacity-50"
        >
          {isGenerating ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              Generating Your Story...
            </>
          ) : (
            <>
              <Wand2 className="h-4 w-4 mr-2" />
              Create My Magical Story
            </>
          )}
        </Button>
      </div>
    </div>
  )
}
