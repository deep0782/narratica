'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { BookOpen, Users, Film, Palette, Sparkles, Edit, Wand2 } from 'lucide-react'
import type { StoryFormData } from '@/app/create/page'

interface ReviewStepProps {
  formData: StoryFormData
  onGenerate: () => void
  onPrev: () => void
}

export function ReviewStep({ formData, onGenerate, onPrev }: ReviewStepProps) {
  const [isGenerating, setIsGenerating] = useState(false)

  const handleGenerate = async () => {
    setIsGenerating(true)
    try {
      await onGenerate()
    } finally {
      setIsGenerating(false)
    }
  }

  const allCharacters = [...(formData.characters || []), ...(formData.extractedCharacters || [])]
  const allScenes = [...(formData.scenes || []), ...(formData.generatedScenes || [])]
    .sort((a, b) => a.order - b.order)

  const getArtStyleName = (styleId: string) => {
    const styles = {
      watercolor: 'Watercolor Dreams',
      cartoon: 'Cartoon Adventure',
      'digital-art': 'Digital Magic',
      storybook: 'Classic Storybook',
      minimalist: 'Simple & Clean',
      fantasy: 'Fantasy Realm'
    }
    return styles[styleId as keyof typeof styles] || styleId
  }

  const getColorPaletteName = (paletteId: string) => {
    const palettes = {
      warm: 'Warm & Cozy',
      cool: 'Cool & Calm',
      pastel: 'Pastel Dreams',
      vibrant: 'Bright & Bold',
      earth: 'Natural Earth',
      magical: 'Magical Rainbow'
    }
    return palettes[paletteId as keyof typeof palettes] || paletteId
  }

  return (
    <div className="max-w-4xl mx-auto space-y-8">
      <div className="text-center space-y-2">
        <h2 className="text-3xl font-bold text-gray-900">Review Your Story</h2>
        <p className="text-gray-600">
          Take a final look at your story details before we create your magical book
        </p>
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        {/* Story Details */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <BookOpen className="h-5 w-5 text-purple-600" />
              Story Details
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <h4 className="font-medium text-gray-900 mb-1">Title</h4>
              <p className="text-gray-700">
                {formData.autoGeneratedTitle || 'AI will generate a title'}
              </p>
            </div>
            
            <div>
              <h4 className="font-medium text-gray-900 mb-1">Description</h4>
              <p className="text-gray-700 text-sm line-clamp-3">
                {formData.storyDescription}
              </p>
            </div>

            {formData.educational_theme && (
              <div>
                <h4 className="font-medium text-gray-900 mb-1">Educational Theme</h4>
                <Badge variant="secondary">{formData.educational_theme}</Badge>
              </div>
            )}

            {formData.specific_elements && formData.specific_elements.length > 0 && (
              <div>
                <h4 className="font-medium text-gray-900 mb-2">Special Elements</h4>
                <div className="flex flex-wrap gap-1">
                  {formData.specific_elements.map((element, index) => (
                    <Badge key={index} variant="outline" className="text-xs">
                      {element}
                    </Badge>
                  ))}
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Art Style */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Palette className="h-5 w-5 text-purple-600" />
              Visual Style
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <h4 className="font-medium text-gray-900 mb-1">Art Style</h4>
              <p className="text-gray-700">
                {getArtStyleName(formData.artStyle) || 'Not selected'}
              </p>
            </div>
            
            <div>
              <h4 className="font-medium text-gray-900 mb-1">Color Palette</h4>
              <p className="text-gray-700">
                {getColorPaletteName(formData.colorPalette) || 'Not selected'}
              </p>
            </div>
          </CardContent>
        </Card>

        {/* Characters */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Users className="h-5 w-5 text-purple-600" />
              Characters ({allCharacters.length})
            </CardTitle>
          </CardHeader>
          <CardContent>
            {allCharacters.length > 0 ? (
              <div className="space-y-3">
                {allCharacters.slice(0, 3).map((character) => (
                  <div key={character.id} className="flex items-start space-x-3">
                    <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center flex-shrink-0">
                      <Users className="h-4 w-4 text-purple-600" />
                    </div>
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-2 mb-1">
                        <h5 className="font-medium text-gray-900 text-sm">{character.name}</h5>
                        <Badge variant={character.role === 'main' ? 'default' : 'secondary'} className="text-xs">
                          {character.role}
                        </Badge>
                      </div>
                      <p className="text-xs text-gray-600 line-clamp-2">{character.description}</p>
                    </div>
                  </div>
                ))}
                {allCharacters.length > 3 && (
                  <p className="text-xs text-gray-500 text-center">
                    +{allCharacters.length - 3} more characters
                  </p>
                )}
              </div>
            ) : (
              <p className="text-gray-500 text-sm">No characters added yet</p>
            )}
          </CardContent>
        </Card>

        {/* Scenes */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Film className="h-5 w-5 text-purple-600" />
              Scenes ({allScenes.length})
            </CardTitle>
          </CardHeader>
          <CardContent>
            {allScenes.length > 0 ? (
              <div className="space-y-3">
                {allScenes.slice(0, 3).map((scene) => (
                  <div key={scene.id} className="flex items-start space-x-3">
                    <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0">
                      <span className="text-xs font-medium text-green-600">{scene.order}</span>
                    </div>
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-2 mb-1">
                        <h5 className="font-medium text-gray-900 text-sm">{scene.title}</h5>
                        <Badge variant="outline" className="text-xs">{scene.mood}</Badge>
                      </div>
                      <p className="text-xs text-gray-600 line-clamp-2">{scene.description}</p>
                    </div>
                  </div>
                ))}
                {allScenes.length > 3 && (
                  <p className="text-xs text-gray-500 text-center">
                    +{allScenes.length - 3} more scenes
                  </p>
                )}
              </div>
            ) : (
              <p className="text-gray-500 text-sm">No scenes added yet</p>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Generation Summary */}
      <Card className="bg-gradient-to-r from-purple-50 to-pink-50 border-purple-200">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Sparkles className="h-5 w-5 text-purple-600" />
            What We'll Create
          </CardTitle>
          <CardDescription>
            Here's what our AI will generate for your personalized story
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="text-center p-4 bg-white rounded-lg">
              <BookOpen className="h-8 w-8 text-purple-600 mx-auto mb-2" />
              <h4 className="font-medium text-gray-900 mb-1">Complete Story</h4>
              <p className="text-xs text-gray-600">Full narrative with engaging text</p>
            </div>
            <div className="text-center p-4 bg-white rounded-lg">
              <Palette className="h-8 w-8 text-purple-600 mx-auto mb-2" />
              <h4 className="font-medium text-gray-900 mb-1">Custom Illustrations</h4>
              <p className="text-xs text-gray-600">AI-generated artwork for each scene</p>
            </div>
            <div className="text-center p-4 bg-white rounded-lg">
              <Wand2 className="h-8 w-8 text-purple-600 mx-auto mb-2" />
              <h4 className="font-medium text-gray-900 mb-1">Interactive Experience</h4>
              <p className="text-xs text-gray-600">Digital storybook with animations</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Generation Warning */}
      <Card className="border-amber-200 bg-amber-50">
        <CardContent className="p-4">
          <div className="flex items-start space-x-3">
            <div className="w-5 h-5 text-amber-600 mt-0.5">
              <svg fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
            </div>
            <div>
              <h4 className="font-medium text-amber-900 mb-1">Ready to Generate?</h4>
              <p className="text-sm text-amber-800">
                Story generation will take 3-4 minutes and will create custom illustrations. 
                Make sure all details are correct before proceeding.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Navigation */}
      <div className="flex justify-between">
        <Button variant="outline" onClick={onPrev} disabled={isGenerating}>
          <Edit className="h-4 w-4 mr-2" />
          Back to Edit
        </Button>
        <Button 
          onClick={handleGenerate}
          disabled={isGenerating}
          size="lg"
          className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
        >
          {isGenerating ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              Generating Story...
            </>
          ) : (
            <>
              <Wand2 className="h-4 w-4 mr-2" />
              Create My Magical Story
            </>
          )}
        </Button>
      </div>
    </div>
  )
}
