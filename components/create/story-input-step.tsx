'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Textarea } from '@/components/ui/textarea'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Sparkles, Lightbulb, X } from 'lucide-react'
import type { StoryFormData } from '@/app/create/page'

interface StoryInputStepProps {
  formData: StoryFormData
  updateFormData: (updates: Partial<StoryFormData>) => void
  onNext: () => void
}

const STORY_PROMPTS = [
  "A magical adventure in an enchanted forest",
  "A brave child who saves their neighborhood",
  "A friendship between unlikely animal companions",
  "A journey to a land made of candy and sweets",
  "A story about overcoming fears and being brave",
  "An underwater adventure with sea creatures",
  "A tale about the importance of telling the truth",
  "A space adventure to distant planets"
]

const EDUCATIONAL_THEMES = [
  "Friendship and Kindness",
  "Courage and Bravery", 
  "Honesty and Truth",
  "Responsibility",
  "Empathy and Understanding",
  "Perseverance",
  "Creativity and Imagination",
  "Environmental Awareness"
]

export function StoryInputStep({ formData, updateFormData, onNext }: StoryInputStepProps) {
  const [customElement, setCustomElement] = useState('')

  const handleStoryDescriptionChange = (value: string) => {
    updateFormData({ 
      storyDescription: value,
      story_description: value 
    })
  }

  const handleTitleChange = (value: string) => {
    updateFormData({ autoGeneratedTitle: value })
  }

  const handleEducationalThemeChange = (theme: string) => {
    updateFormData({ educational_theme: theme })
  }

  const addCustomElement = () => {
    if (customElement.trim()) {
      const currentElements = formData.specific_elements || []
      updateFormData({
        specific_elements: [...currentElements, customElement.trim()]
      })
      setCustomElement('')
    }
  }

  const removeElement = (index: number) => {
    const currentElements = formData.specific_elements || []
    updateFormData({
      specific_elements: currentElements.filter((_, i) => i !== index)
    })
  }

  const usePrompt = (prompt: string) => {
    handleStoryDescriptionChange(prompt)
  }

  const canProceed = formData.storyDescription.trim().length > 0 && formData.educational_theme

  return (
    <div className="max-w-4xl mx-auto space-y-8">
      <div className="text-center space-y-2">
        <h2 className="text-3xl font-bold text-gray-900">Tell Us About Your Story</h2>
        <p className="text-gray-600">
          Share your story ideas and we'll help bring them to life with AI magic
        </p>
      </div>

      <div className="grid gap-8 md:grid-cols-2">
        {/* Story Input */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Sparkles className="h-5 w-5 text-purple-600" />
              Story Description
            </CardTitle>
            <CardDescription>
              Describe the story you'd like to create for your child
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="story-description">What should your story be about?</Label>
              <Textarea
                id="story-description"
                placeholder="Tell us about the adventure, characters, setting, or theme you'd like to explore..."
                value={formData.storyDescription}
                onChange={(e) => handleStoryDescriptionChange(e.target.value)}
                className="min-h-[120px]"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="story-title">Story Title (Optional)</Label>
              <Input
                id="story-title"
                placeholder="Leave blank for AI to generate a title"
                value={formData.autoGeneratedTitle}
                onChange={(e) => handleTitleChange(e.target.value)}
              />
            </div>

            <div className="space-y-2">
              <Label>Educational Theme</Label>
              <div className="grid grid-cols-2 gap-2">
                {EDUCATIONAL_THEMES.map((theme) => (
                  <Button
                    key={theme}
                    variant={formData.educational_theme === theme ? "default" : "outline"}
                    size="sm"
                    onClick={() => handleEducationalThemeChange(theme)}
                    className="text-xs"
                  >
                    {theme}
                  </Button>
                ))}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Story Elements */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Lightbulb className="h-5 w-5 text-yellow-600" />
              Special Elements
            </CardTitle>
            <CardDescription>
              Add specific things you'd like to include in your story
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="custom-element">Add Custom Element</Label>
              <div className="flex gap-2">
                <Input
                  id="custom-element"
                  placeholder="e.g., talking animals, magic wand, castle..."
                  value={customElement}
                  onChange={(e) => setCustomElement(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && addCustomElement()}
                />
                <Button onClick={addCustomElement} size="sm">
                  Add
                </Button>
              </div>
            </div>

            {formData.specific_elements && formData.specific_elements.length > 0 && (
              <div className="space-y-2">
                <Label>Your Story Elements</Label>
                <div className="flex flex-wrap gap-2">
                  {formData.specific_elements.map((element, index) => (
                    <Badge key={index} variant="secondary" className="flex items-center gap-1">
                      {element}
                      <button
                        onClick={() => removeElement(index)}
                        className="ml-1 hover:text-red-500"
                      >
                        <X className="h-3 w-3" />
                      </button>
                    </Badge>
                  ))}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Story Prompts */}
      <Card>
        <CardHeader>
          <CardTitle>Need Inspiration?</CardTitle>
          <CardDescription>
            Click on any of these story ideas to get started
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid gap-2 md:grid-cols-2">
            {STORY_PROMPTS.map((prompt, index) => (
              <Button
                key={index}
                variant="ghost"
                className="justify-start text-left h-auto p-3"
                onClick={() => usePrompt(prompt)}
              >
                <Lightbulb className="h-4 w-4 mr-2 text-yellow-500 flex-shrink-0" />
                <span className="text-sm">{prompt}</span>
              </Button>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Navigation */}
      <div className="flex justify-end">
        <Button 
          onClick={onNext}
          disabled={!canProceed}
          className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
        >
          Continue to Art Style
        </Button>
      </div>
    </div>
  )
}
