'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { StoryWizardHeader } from '@/components/create/story-wizard-header'
import { WizardNavigation } from '@/components/create/wizard-navigation'
import { StoryInputStep } from '@/components/create/story-input-step'
import { ArtStyleSelectionStep } from '@/components/create/art-style-selection-step'
import { CharacterManagementStep } from '@/components/create/character-management-step'
import { SceneManagementStep } from '@/components/create/scene-management-step'
import { ReviewStep } from '@/components/create/review-step'
import { GeneratingStep } from '@/components/create/generating-step'
import { loadDraft, saveDraft, clearDraft, hasDraft } from '@/lib/draft-storage'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Button } from '@/components/ui/button'

export interface Character {
  id: string
  name: string
  description: string
  appearance: string
  role: 'main' | 'supporting' | 'minor'
  isChildCharacter?: boolean
}

export interface Scene {
  id: string
  title: string
  description: string
  characters: string[]
  setting: string
  mood: string
  keyEvents: string[]
  imagePrompt: string
  narration: string
  order: number
}

export interface StoryFormData {
  // Story Input
  storyDescription: string
  autoGeneratedTitle: string
  selectedChild: string
  
  // Art Style
  artStyle: string
  colorPalette: string
  illustrationStyle: string
  
  // Characters
  characters: Character[]
  extractedCharacters: Character[]
  
  // Scenes
  scenes: Scene[]
  generatedScenes: Scene[]
  
  // Additional properties for compatibility
  specific_elements: string[]
  story_description: string
  educational_theme: string
  age_range: string
  story_length: string
  child_name: string
  child_interests: string[]
  moral_lesson: string
  setting_preference: string
  character_preferences: string[]
}

const initialFormData: StoryFormData = {
  storyDescription: '',
  autoGeneratedTitle: '',
  selectedChild: '',
  artStyle: '',
  colorPalette: '',
  illustrationStyle: '',
  characters: [],
  extractedCharacters: [],
  scenes: [],
  generatedScenes: [],
  specific_elements: [],
  story_description: '',
  educational_theme: '',
  age_range: '',
  story_length: '',
  child_name: '',
  child_interests: [],
  moral_lesson: '',
  setting_preference: '',
  character_preferences: []
}

const steps = [
  { id: 'input', title: 'Story Input', description: 'Tell us about your story' },
  { id: 'art', title: 'Art Style', description: 'Choose visual style' },
  { id: 'characters', title: 'Characters', description: 'Manage story characters' },
  { id: 'scenes', title: 'Scenes', description: 'Structure your story' },
  { id: 'review', title: 'Review', description: 'Final review' },
  { id: 'generating', title: 'Generating', description: 'Creating your story' }
]

export default function CreateStoryPage() {
  const [currentStep, setCurrentStep] = useState(0)
  const [formData, setFormData] = useState<StoryFormData>(initialFormData)
  const [showDraftAlert, setShowDraftAlert] = useState(false)
  const router = useRouter()

  useEffect(() => {
    // Check for existing draft on component mount
    if (hasDraft()) {
      setShowDraftAlert(true)
    }
  }, [])

  useEffect(() => {
    // Auto-save draft when form data changes
    const timeoutId = setTimeout(() => {
      if (formData.storyDescription || formData.autoGeneratedTitle) {
        saveDraft(formData)
      }
    }, 1000) // Debounce auto-save by 1 second

    return () => clearTimeout(timeoutId)
  }, [formData])

  const loadExistingDraft = () => {
    const draft = loadDraft()
    if (draft) {
      setFormData({ ...initialFormData, ...draft })
      setShowDraftAlert(false)
    }
  }

  const dismissDraft = () => {
    clearDraft()
    setShowDraftAlert(false)
  }

  const updateFormData = (updates: Partial<StoryFormData>) => {
    setFormData(prev => ({ ...prev, ...updates }))
  }

  const nextStep = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1)
    }
  }

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1)
    }
  }

  const goToStep = (stepIndex: number) => {
    setCurrentStep(stepIndex)
  }

  const handleGenerate = async () => {
    // Clear draft when generating
    clearDraft()
    
    // Simulate story generation
    await new Promise(resolve => setTimeout(resolve, 3000))
    
    // Redirect to generated story
    router.push('/story/sample-story-id')
  }

  const renderCurrentStep = () => {
    switch (steps[currentStep].id) {
      case 'input':
        return (
          <StoryInputStep
            formData={formData}
            updateFormData={updateFormData}
            onNext={nextStep}
          />
        )
      case 'art':
        return (
          <ArtStyleSelectionStep
            formData={formData}
            updateFormData={updateFormData}
            onNext={nextStep}
            onPrev={prevStep}
          />
        )
      case 'characters':
        return (
          <CharacterManagementStep
            formData={formData}
            updateFormData={updateFormData}
            onNext={nextStep}
            onPrev={prevStep}
          />
        )
      case 'scenes':
        return (
          <SceneManagementStep
            formData={formData}
            updateFormData={updateFormData}
            onNext={nextStep}
            onPrev={prevStep}
          />
        )
      case 'review':
        return (
          <ReviewStep
            formData={formData}
            onGenerate={handleGenerate}
            onPrev={prevStep}
          />
        )
      case 'generating':
        return <GeneratingStep />
      default:
        return null
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-yellow-50">
      <div className="container mx-auto px-4 py-8">
        {showDraftAlert && (
          <Alert className="mb-6 border-amber-200 bg-amber-50">
            <AlertDescription className="flex items-center justify-between">
              <span>We found a saved draft of your story. Would you like to continue where you left off?</span>
              <div className="flex gap-2 ml-4">
                <Button variant="outline" size="sm" onClick={dismissDraft}>
                  Start Fresh
                </Button>
                <Button size="sm" onClick={loadExistingDraft}>
                  Load Draft
                </Button>
              </div>
            </AlertDescription>
          </Alert>
        )}

        <StoryWizardHeader 
          currentStep={currentStep} 
          totalSteps={steps.length}
          title={steps[currentStep].title}
        />
        
        <WizardNavigation
          steps={steps}
          currentStep={currentStep}
          onStepClick={goToStep}
        />
        
        <div className="mt-8">
          {renderCurrentStep()}
        </div>
      </div>
    </div>
  )
}
