'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { StoryWizardHeader } from '@/components/create/story-wizard-header'
import { ChildSelectionStep } from '@/components/create/child-selection-step'
import { StoryInputStep } from '@/components/create/story-input-step'
import { ArtStyleSelectionStep } from '@/components/create/art-style-selection-step'
import { CharacterManagementStep } from '@/components/create/character-management-step'
import { SceneManagementStep } from '@/components/create/scene-management-step'
import { ReviewStep } from '@/components/create/review-step'
import { GeneratingStep } from '@/components/create/generating-step'
import { WizardNavigation } from '@/components/create/wizard-navigation'
import { getCurrentUser, getProfile, trackUsage, isDatabaseAvailable } from '@/lib/supabase'
import { autoSaveDraft, loadDraft, clearDraft } from '@/lib/draft-storage'
import type { ParentProfile, Child } from '@/lib/supabase'

export interface Character {
  id: string
  name: string
  description: string
  traits: string[]
  age?: string
  relationships: string[]
  imageUrl?: string
  appearance: {
    hairColor?: string
    clothing?: string
    physicalTraits?: string[]
  }
}

export interface Scene {
  id: string
  title: string
  description: string
  characters: string[]
  imageUrl?: string
  order: number
}

export interface StoryFormData {
  // Child Selection
  selectedChild: Child | null
  newChildData?: {
    name: string
    age_group: 'toddlers' | 'elementary' | 'preteens'
    favorite_activities: string[]
    character_traits: string[]
  }
  
  // Story Input
  storyDescription: string
  autoGeneratedTitle: string
  customTitle?: string
  storyLength: {
    pages: 3 | 5 | 8 | 12
    scenes: 5 | 8 | 10 | 15
  }
  targetAgeGroup: 'toddlers' | 'elementary' | 'preteens'
  educationalTheme: string
  
  // Story Preferences (missing properties)
  story_description: string
  educational_theme: string
  story_length: 'short' | 'medium' | 'long'
  character_role: 'protagonist' | 'supporting' | 'narrator'
  setting_preference?: string
  moral_lesson?: string
  specific_elements: string[]
  
  // Art Style
  artStyle: string
  art_style: string
  
  // Characters
  characters: Character[]
  
  // Scenes
  scenes: Scene[]
}

const WIZARD_STEPS = [
  { id: 'child', title: 'Select Child', description: 'Choose who will be the star of this story' },
  { id: 'story-input', title: 'Story Input', description: 'Tell us about your magical story idea' },
  { id: 'art-style', title: 'Art Style', description: 'Choose the perfect visual style' },
  { id: 'characters', title: 'Character Management', description: 'Meet your story characters' },
  { id: 'scenes', title: 'Scene Management', description: 'Organize your story scenes' },
  { id: 'review', title: 'Review & Generate', description: 'Review and create your story' },
  { id: 'generating', title: 'Creating Magic', description: 'AI is crafting your personalized story' }
]

export default function CreateStoryPage() {
  const router = useRouter()
  const [currentStep, setCurrentStep] = useState(0)
  const [profile, setProfile] = useState<ParentProfile | null>(null)
  const [children, setChildren] = useState<Child[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [isDatabaseReady, setIsDatabaseReady] = useState(false)
  const [formData, setFormData] = useState<StoryFormData>({
    selectedChild: null,
    storyDescription: '',
    autoGeneratedTitle: '',
    storyLength: { pages: 5, scenes: 8 },
    targetAgeGroup: 'elementary',
    educationalTheme: '',
    artStyle: '',
    characters: [],
    scenes: [],
    // Additional required properties
    story_description: '',
    educational_theme: '',
    story_length: 'medium',
    character_role: 'protagonist',
    setting_preference: '',
    moral_lesson: '',
    specific_elements: [],
    art_style: ''
  })

  useEffect(() => {
    loadUserData()
    loadSavedDraft()
  }, [])

  // Auto-save functionality
  useEffect(() => {
    const timer = setTimeout(() => {
      if (formData.storyDescription || formData.autoGeneratedTitle) {
        autoSaveDraft(formData)
      }
    }, 2000)

    return () => clearTimeout(timer)
  }, [formData])

  const loadUserData = async () => {
    try {
      const dbAvailable = await isDatabaseAvailable()
      setIsDatabaseReady(dbAvailable)

      const user = await getCurrentUser()
      if (!user) {
        router.push('/auth/signin')
        return
      }

      const userProfile = await getProfile(user.id)
      setProfile(userProfile)

      setChildren(mockChildren)
    } catch (error) {
      console.error('Error loading user data:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const loadSavedDraft = () => {
    const draft = loadDraft()
    if (draft) {
      setFormData(prev => ({ ...prev, ...draft }))
    }
  }

  // Mock children data
  const mockChildren: Child[] = [
    {
      id: 'child-1',
      parent_id: 'user-1',
      name: 'Emma',
      age_group: 'elementary',
      favorite_activities: ['reading', 'drawing', 'playing outside'],
      character_traits: ['brave', 'curious', 'kind'],
      created_at: '2024-01-10T10:00:00Z',
      updated_at: '2024-01-10T10:00:00Z'
    },
    {
      id: 'child-2',
      parent_id: 'user-1',
      name: 'Alex',
      age_group: 'elementary',
      favorite_activities: ['building blocks', 'adventure games'],
      character_traits: ['adventurous', 'creative', 'helpful'],
      created_at: '2024-01-12T14:00:00Z',
      updated_at: '2024-01-12T14:00:00Z'
    }
  ]

  const updateFormData = (updates: Partial<StoryFormData>) => {
    setFormData(prev => ({ ...prev, ...updates }))
  }

  const canProceedToNext = () => {
    switch (currentStep) {
      case 0: // Child Selection
        return formData.selectedChild !== null || formData.newChildData !== undefined
      case 1: // Story Input
        return formData.storyDescription.trim().length > 0 && formData.educationalTheme
      case 2: // Art Style
        return formData.artStyle !== ''
      case 3: // Characters
        return formData.characters.length > 0
      case 4: // Scenes
        return formData.scenes.length > 0
      case 5: // Review
        return true
      default:
        return false
    }
  }

  const handleNext = () => {
    if (canProceedToNext() && currentStep < WIZARD_STEPS.length - 1) {
      setCurrentStep(prev => prev + 1)
    }
  }

  const handlePrevious = () => {
    if (currentStep > 0) {
      setCurrentStep(prev => prev - 1)
    }
  }

  const handleGenerateStory = async () => {
    try {
      setCurrentStep(6) // Move to generating step
      
      if (profile) {
        await trackUsage(profile.id, 'story_create', formData.selectedChild?.id)
      }

      // Clear the draft since we're generating the story
      clearDraft()

      // Simulate story generation
      await new Promise(resolve => setTimeout(resolve, 5000))
      
      router.push('/dashboard')
    } catch (error) {
      console.error('Error generating story:', error)
    }
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 to-pink-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading your story creation wizard...</p>
        </div>
      </div>
    )
  }

  const renderCurrentStep = () => {
    switch (currentStep) {
      case 0:
        return (
          <ChildSelectionStep
            children={children}
            selectedChild={formData.selectedChild}
            newChildData={formData.newChildData}
            onChildSelect={(child) => updateFormData({ selectedChild: child, newChildData: undefined })}
            onNewChildData={(data) => updateFormData({ newChildData: data, selectedChild: null })}
          />
        )
      case 1: // Story Input
        return (
          <StoryInputStep
            formData={formData}
            onUpdate={(updates) => {
              // Sync duplicate properties
              const syncedUpdates = {
                ...updates,
                story_description: updates.storyDescription || updates.story_description || formData.story_description,
                educational_theme: updates.educationalTheme || updates.educational_theme || formData.educational_theme
              }
              updateFormData(syncedUpdates)
            }}
            profile={profile}
          />
        )
      case 2: // Art Style
        return (
          <ArtStyleSelectionStep
            selectedStyle={formData.artStyle}
            onStyleSelect={(style) => updateFormData({ artStyle: style, art_style: style })}
            childName={formData.selectedChild?.name || formData.newChildData?.name || 'Your child'}
          />
        )
      case 3:
        return (
          <CharacterManagementStep
            characters={formData.characters}
            storyDescription={formData.storyDescription}
            onCharactersUpdate={(characters) => updateFormData({ characters })}
          />
        )
      case 4:
        return (
          <SceneManagementStep
            scenes={formData.scenes}
            characters={formData.characters}
            storyDescription={formData.storyDescription}
            onScenesUpdate={(scenes) => updateFormData({ scenes })}
          />
        )
      case 5:
        return (
          <ReviewStep
            formData={formData}
            profile={profile}
            onGenerate={handleGenerateStory}
          />
        )
      case 6:
        return <GeneratingStep />
      default:
        return null
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-pink-50">
      <StoryWizardHeader 
        currentStep={currentStep}
        totalSteps={WIZARD_STEPS.length - 1}
        stepTitle={WIZARD_STEPS[currentStep].title}
        stepDescription={WIZARD_STEPS[currentStep].description}
      />

      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          {!isDatabaseReady && currentStep < 6 && (
            <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                <p className="text-sm text-blue-800">
                  <strong>Demo Mode:</strong> Database not connected. Story creation will use sample data.
                </p>
              </div>
            </div>
          )}

          {renderCurrentStep()}
          
          {currentStep < 6 && (
            <WizardNavigation
              currentStep={currentStep}
              totalSteps={WIZARD_STEPS.length - 1}
              canProceed={canProceedToNext()}
              onNext={handleNext}
              onPrevious={handlePrevious}
              isLastStep={currentStep === 5}
            />
          )}
        </div>
      </div>
    </div>
  )
}
