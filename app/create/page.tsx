'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { StoryWizardHeader } from '@/components/create/story-wizard-header'
import { WizardNavigation } from '@/components/create/wizard-navigation'
import { StoryInputStep } from '@/components/create/story-input-step'
import { ArtStyleSelectionStep } from '@/components/create/art-style-selection-step'
import { CharacterManagementStep } from '@/components/create/character-management-step'
import { SceneManagementStep } from '@/components/create/scene-management-step'
import { ReviewStep } from '@/components/create/review-step'
import { GeneratingStep } from '@/components/create/generating-step'
import { loadDraft, saveDraft, clearDraft, hasDraft } from '@/lib/draft-storage'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Button } from '@/components/ui/button'
import { useWizard, WizardProvider } from '@/contexts/wizard-context'

export interface Character {
  id: string
  name: string
  description: string
  appearance: string
  role: 'main' | 'supporting' | 'minor'
  isChildCharacter?: boolean
  imageUrl?: string // Added imageUrl property
}

export interface Scene {
  id: string
  title: string
  description: string
  characters: string[]
  setting: string
  mood: string
  keyEvents: string[]
  imagePrompt: string
  narration: string
  order: number
}

export interface GeneratedScene extends Scene {
  id: string
  title: string
  description: string
  characters: string[]
  setting: string
  mood: string
  keyEvents: string[]
  imagePrompt: string
  narration: string
  order: number
}

export interface StoryFormData {
  // Story Input
  storyDescription: string
  autoGeneratedTitle: string
  educational_theme: string
  specific_elements: string[]

  // Art Style
  artStyle: string
  colorPalette: string
  illustrationStyle: string
  sessionId: string

  // Characters
  characters: Character[]
  extraCharacters: string[]
  // Scenes
  scenes: Scene[]
  generatedScenes: GeneratedScene[]
  // Review
  review: string
}

export const initialFormData: StoryFormData = {
  storyDescription: '',
  autoGeneratedTitle: '',
  educational_theme: '',
  specific_elements: [],
  artStyle: '',
  colorPalette: '',
  illustrationStyle: '',
  characters: [],
  scenes: [],
  sessionId: '',
  extraCharacters: [],
  generatedScenes: [],
  review: '' // Added missing required review property
}

const steps = [
  { id: 'input', title: 'Story Input', description: 'Tell us about your story' },
  { id: 'art', title: 'Art Style', description: 'Choose visual style' },
  { id: 'characters', title: 'Characters', description: 'Manage story characters' },
  { id: 'scenes', title: 'Scenes', description: 'Structure your story' },
  { id: 'review', title: 'Review', description: 'Final review' },
  { id: 'generating', title: 'Generating', description: 'Creating your story' }
]

function CreateStoryPageContent() {
  const { state, goToStep, nextStep, prevStep, updateForm } = useWizard()
  const { currentStep, formData } = state
  const [showDraftAlert, setShowDraftAlert] = useState(false)
  const router = useRouter()

  // useEffect(() => {
  //   if (hasDraft()) {
  //     setShowDraftAlert(true)
  //   }
  // }, [])

  // useEffect(() => {
  //   const timeoutId = setTimeout(() => {
  //     if (formData.storyDescription || formData.autoGeneratedTitle) {
  //       saveDraft(formData)
  //     }
  //   }, 1000)

  //   return () => clearTimeout(timeoutId)
  // }, [formData])

  const loadExistingDraft = () => {
    const draft = loadDraft()
    if (draft) {
      updateForm(draft)
      setShowDraftAlert(false)
    }
  }

  const dismissDraft = () => {
    clearDraft()
    setShowDraftAlert(false)
  }

  const handleGenerate = async () => {
    alert('Generating story...')
    // clearDraft()
    // await new Promise(resolve => setTimeout(resolve, 3000))
    // router.push('/story/sample-story-id')
  }

  const renderCurrentStep = () => {
    switch (steps[currentStep].id) {
      case 'input':
        return <StoryInputStep onNext={nextStep} />
      case 'art':
        return <ArtStyleSelectionStep onNext={nextStep} onPrev={prevStep} />
      case 'characters':
        return <CharacterManagementStep onNext={nextStep} onPrev={prevStep} />
      case 'scenes':
        return <SceneManagementStep onNext={nextStep} onPrev={prevStep} />
      case 'review':
        return <ReviewStep onGenerate={handleGenerate} onPrev={prevStep} />
      case 'generating':
        return <GeneratingStep />
      default:
        return null
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-yellow-50">
      <div className="container mx-auto px-4 py-8">
        {showDraftAlert && (
          <Alert className="mb-6 border-amber-200 bg-amber-50">
            <AlertDescription className="flex items-center justify-between">
              <span>We found a saved draft of your story. Would you like to continue where you left off?</span>
              <div className="flex gap-2 ml-4">
                <Button variant="outline" size="sm" onClick={dismissDraft}>
                  Start Fresh
                </Button>
                <Button size="sm" onClick={loadExistingDraft}>
                  Load Draft
                </Button>
              </div>
            </AlertDescription>
          </Alert>
        )}

        <StoryWizardHeader
          step={currentStep}
          totalSteps={steps.length}
          title={steps[currentStep].title}
        />
        
        <WizardNavigation
          steps={steps}
          currentStep={currentStep}
          onStepClick={goToStep}
        />
        
        <div className="mt-8">
          {renderCurrentStep()}
        </div>
      </div>
    </div>
  )
}

export default function CreateStoryPage() {
  return (
    <WizardProvider>
      <CreateStoryPageContent />
    </WizardProvider>
  )
}
